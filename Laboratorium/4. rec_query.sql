/*
	Najprostsza rekursja w SQL
*/
WITH MY_TEMP(NUMBER) AS(
	SELECT 1
	UNION ALL
	SELECT NUMBER + 1 FROM MY_TEMP WHERE NUMBER < 10
)
SELECT * FROM MY_TEMP;

/*
	Częsty przypadek użycia rekursji
*/
WITH MY_TEMP(MY_DATE) AS(
	SELECT '2019-01-01'
	UNION ALL
	SELECT date(MY_DATE, '+1 day') FROM MY_TEMP WHERE MY_DATE < date('now')
)
SELECT MY_DATE FROM MY_TEMP;

/*
	Antywzorzec drzewa w SQL
*/
CREATE TABLE TREE(
	ID INT PRIMARY KEY,
	PARENT_ID INT REFERENCES TREE(ID),
	NAME VARCHAR(100)
);

INSERT INTO TREE VALUES(1, NULL, 'Stary dziad');
INSERT INTO TREE VALUES(2, 1, 'Main');
INSERT INTO TREE VALUES(3, 1, 'Cabel');
INSERT INTO TREE VALUES(4, 2, 'Pan Syn');
INSERT INTO TREE VALUES(5, 2, 'Pani Córka');

/*
	Rekursywne zapytanie żeby wyliczyć BREADCRUMB
*/
WITH TREE_QUERY(MY_ID, PARENT_ID, NAME, BREADCRUMB) AS(
	SELECT
		ID,
		PARENT_ID,
		NAME,
		'/' || NAME
	FROM
		TREE
	UNION ALL
	SELECT
		T.MY_ID,
		T2.PARENT_ID,
		T.NAME,
		'/' || T2.NAME || T.BREADCRUMB
	FROM
		TREE_QUERY T
		INNER JOIN TREE T2 ON T.PARENT_ID = T2.ID
)
SELECT NAME, BREADCRUMB FROM TREE_QUERY WHERE BREADCRUMB LIKE '/Stary dziad/Main/%';

/*
	Rekursywne zapytanie żeby wyliczyć wszystkich ojców i dziadków
*/
WITH TREE_QUERY(ID, PARENT_ID) AS(
	SELECT
		ID,
		PARENT_ID
	FROM
		TREE
	UNION ALL
	SELECT
		T.ID,
		T2.PARENT_ID
	FROM
		TREE_QUERY T
		INNER JOIN TREE T2 ON T.PARENT_ID = T2.ID
)
SELECT 
	T2.NAME AS 'JA',
	T3.NAME AS 'PRZODEK'
FROM 
	TREE_QUERY T
	INNER JOIN TREE T2 ON T.ID = T2.ID
	INNER JOIN TREE T3 ON T.PARENT_ID = T3.ID